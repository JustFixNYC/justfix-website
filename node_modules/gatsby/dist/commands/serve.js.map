{"version":3,"sources":["../../src/commands/serve.js"],"names":["path","require","openurl","fs","compression","express","chalk","match","reachMatch","rl","onExit","report","telemetry","detectPortInUseAndPrompt","getConfigFile","preferDefault","rlInterface","createInterface","input","process","stdin","output","stdout","on","exit","trackCli","readMatchPaths","program","filePath","join","directory","rawJSON","readFile","error","warn","bold","JSON","parse","matchPathRouter","matchPaths","options","req","res","next","url","accepts","matchPath","find","sendFile","err","module","exports","startBackgroundUpdate","prefixPaths","port","open","host","parseInt","config","pathPrefix","configPathPrefix","root","app","router","Router","use","expressMiddleware","static","status","header","startListening","listen","openUrlString","info","Promise","resolve","catch"],"mappings":";;AAAA;AACA,MAAMA,IAAI,GAAGC,OAAO,CAAE,MAAF,CAApB;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAE,YAAF,CAAvB;;AACA,MAAME,EAAE,GAAGF,OAAO,CAAE,UAAF,CAAlB;;AACA,MAAMG,WAAW,GAAGH,OAAO,CAAE,aAAF,CAA3B;;AACA,MAAMI,OAAO,GAAGJ,OAAO,CAAE,SAAF,CAAvB;;AACA,MAAMK,KAAK,GAAGL,OAAO,CAAE,OAAF,CAArB;;AACA,MAAM;AAAEM,EAAAA,KAAK,EAAEC;AAAT,IAAwBP,OAAO,CAAE,yBAAF,CAArC;;AACA,MAAMQ,EAAE,GAAGR,OAAO,CAAE,UAAF,CAAlB;;AACA,MAAMS,MAAM,GAAGT,OAAO,CAAE,aAAF,CAAtB;;AACA,MAAMU,MAAM,GAAGV,OAAO,CAAE,yBAAF,CAAtB;;AAEA,MAAMW,SAAS,GAAGX,OAAO,CAAE,kBAAF,CAAzB;;AAEA,MAAMY,wBAAwB,GAAGZ,OAAO,CAAE,wCAAF,CAAxC;;AACA,MAAMa,aAAa,GAAGb,OAAO,CAAE,8BAAF,CAA7B;;AACA,MAAMc,aAAa,GAAGd,OAAO,CAAE,6BAAF,CAA7B;;AAEA,MAAMe,WAAW,GAAGP,EAAE,CAACQ,eAAH,CAAmB;AACrCC,EAAAA,KAAK,EAAEC,OAAO,CAACC,KADsB;AAErCC,EAAAA,MAAM,EAAEF,OAAO,CAACG;AAFqB,CAAnB,CAApB,C,CAKA;;AACAN,WAAW,CAACO,EAAZ,CAAgB,QAAhB,EAAyB,MAAM;AAC7BJ,EAAAA,OAAO,CAACK,IAAR;AACD,CAFD;AAIAd,MAAM,CAAC,MAAM;AACXE,EAAAA,SAAS,CAACa,QAAV,CAAoB,YAApB;AACD,CAFK,CAAN;;AAIA,MAAMC,cAAc,GAAG,MAAMC,OAAN,IAAiB;AACtC,QAAMC,QAAQ,GAAG5B,IAAI,CAAC6B,IAAL,CAAUF,OAAO,CAACG,SAAlB,EAA8B,QAA9B,EAAwC,kBAAxC,CAAjB;AACA,MAAIC,OAAO,GAAI,IAAf;;AACA,MAAI;AACFA,IAAAA,OAAO,GAAG,MAAM5B,EAAE,CAAC6B,QAAH,CAAYJ,QAAZ,CAAhB;AACD,GAFD,CAEE,OAAOK,KAAP,EAAc;AACdtB,IAAAA,MAAM,CAACuB,IAAP,CAAYD,KAAZ;AACAtB,IAAAA,MAAM,CAACuB,IAAP,CACG,kBAAiB5B,KAAK,CAAC6B,IAAN,CACf,kBADe,CAEhB,4BAHJ;AAKAxB,IAAAA,MAAM,CAACuB,IAAP,CACG,yEAAwE5B,KAAK,CAAC6B,IAAN,CACtE,cADsE,CAEvE,GAHJ;AAKD;;AACD,SAAOC,IAAI,CAACC,KAAL,CAAWN,OAAX,CAAP;AACD,CAnBD;;AAqBA,MAAMO,eAAe,GAAG,CAACC,UAAD,EAAaC,OAAb,KAAyB,CAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,KAAoB;AACnE,QAAM;AAAEC,IAAAA;AAAF,MAAUH,GAAhB;;AACA,MAAIA,GAAG,CAACI,OAAJ,CAAa,MAAb,CAAJ,EAAyB;AACvB,UAAMC,SAAS,GAAGP,UAAU,CAACQ,IAAX,CAChB,CAAC;AAAED,MAAAA;AAAF,KAAD,KAAmBtC,UAAU,CAACsC,SAAD,EAAYF,GAAZ,CAAV,KAA+B,IADlC,CAAlB;;AAGA,QAAIE,SAAJ,EAAe;AACb,aAAOJ,GAAG,CAACM,QAAJ,CACLhD,IAAI,CAAC6B,IAAL,CAAUiB,SAAS,CAAC9C,IAApB,EAA2B,YAA3B,CADK,EAELwC,OAFK,EAGLS,GAAG,IAAI;AACL,YAAIA,GAAJ,EAAS;AACPN,UAAAA,IAAI;AACL;AACF,OAPI,CAAP;AASD;AACF;;AACD,SAAOA,IAAI,EAAX;AACD,CAnBD;;AAqBAO,MAAM,CAACC,OAAP,GAAiB,MAAMxB,OAAN,IAAiB;AAChCf,EAAAA,SAAS,CAACa,QAAV,CAAoB,aAApB;AACAb,EAAAA,SAAS,CAACwC,qBAAV;AACA,MAAI;AAAEC,IAAAA,WAAF;AAAeC,IAAAA,IAAf;AAAqBC,IAAAA,IAArB;AAA2BC,IAAAA;AAA3B,MAAoC7B,OAAxC;AACA2B,EAAAA,IAAI,GAAG,OAAOA,IAAP,KAAiB,QAAjB,GAA2BG,QAAQ,CAACH,IAAD,EAAO,EAAP,CAAnC,GAAgDA,IAAvD;AAEA,QAAMI,MAAM,GAAG,MAAM3C,aAAa,CAChCD,aAAa,CAACa,OAAO,CAACG,SAAT,EAAqB,eAArB,CADmB,CAAlC;AAIA,QAAM;AAAE6B,IAAAA,UAAU,EAAEC;AAAd,MAAmCF,MAAM,IAAI,EAAnD;AAEA,QAAMC,UAAU,GAAGN,WAAW,IAAIO,gBAAf,GAAkCA,gBAAlC,GAAsD,GAAzE;AAEA,QAAMC,IAAI,GAAG7D,IAAI,CAAC6B,IAAL,CAAUF,OAAO,CAACG,SAAlB,EAA8B,QAA9B,CAAb;AAEA,QAAMgC,GAAG,GAAGzD,OAAO,EAAnB;AACA,QAAM0D,MAAM,GAAG1D,OAAO,CAAC2D,MAAR,EAAf;AAEAF,EAAAA,GAAG,CAACG,GAAJ,CAAQrD,SAAS,CAACsD,iBAAV,CAA6B,OAA7B,CAAR;AAEAH,EAAAA,MAAM,CAACE,GAAP,CAAW7D,WAAW,EAAtB;AACA2D,EAAAA,MAAM,CAACE,GAAP,CAAW5D,OAAO,CAAC8D,MAAR,CAAgB,QAAhB,CAAX;AACA,QAAM5B,UAAU,GAAG,MAAMb,cAAc,CAACC,OAAD,CAAvC;AACAoC,EAAAA,MAAM,CAACE,GAAP,CAAW3B,eAAe,CAACC,UAAD,EAAa;AAAEsB,IAAAA;AAAF,GAAb,CAA1B;AACAE,EAAAA,MAAM,CAACE,GAAP,CAAW,CAACxB,GAAD,EAAMC,GAAN,EAAWC,IAAX,KAAoB;AAC7B,QAAIF,GAAG,CAACI,OAAJ,CAAa,MAAb,CAAJ,EAAyB;AACvB,aAAOH,GAAG,CAAC0B,MAAJ,CAAW,GAAX,EAAgBpB,QAAhB,CAA0B,UAA1B,EAAqC;AAAEa,QAAAA;AAAF,OAArC,CAAP;AACD;;AACD,WAAOlB,IAAI,EAAX;AACD,GALD;AAMAmB,EAAAA,GAAG,CAACG,GAAJ,CAAQ,UAASxB,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,EAAyB;AAC/BD,IAAAA,GAAG,CAAC2B,MAAJ,CAAY,6BAAZ,EAA2C,UAASb,IAAK,IAAGF,IAAK,EAAjE;AACAZ,IAAAA,GAAG,CAAC2B,MAAJ,CAAY,kCAAZ,EAA+C,IAA/C;AACA3B,IAAAA,GAAG,CAAC2B,MAAJ,CACG,8BADH,EAEG,gDAFH;AAIA1B,IAAAA,IAAI;AACL,GARD;AASAmB,EAAAA,GAAG,CAACG,GAAJ,CAAQN,UAAR,EAAoBI,MAApB;;AAEA,QAAMO,cAAc,GAAG,MAAM;AAC3BR,IAAAA,GAAG,CAACS,MAAJ,CAAWjB,IAAX,EAAiBE,IAAjB,EAAuB,MAAM;AAC3B,UAAIgB,aAAa,GAAI,UAAShB,IAAK,IAAGF,IAAK,GAAEK,UAAW,EAAxD;AACAhD,MAAAA,MAAM,CAAC8D,IAAP,CAAa,4BAA2BnE,KAAK,CAAC6B,IAAN,CAAWqC,aAAX,CAA0B,EAAlE;;AACA,UAAIjB,IAAJ,EAAU;AACR5C,QAAAA,MAAM,CAAC8D,IAAP,CAAa,oBAAb;AACAC,QAAAA,OAAO,CAACC,OAAR,CAAgBzE,OAAO,CAACsE,aAAD,CAAvB,EAAwCI,KAAxC,CAA8C3B,GAAG,IAC/CtC,MAAM,CAACuB,IAAP,CAAa,iDAAb,CADF;AAGD;AACF,KATD;AAUD,GAXD;;AAaAoB,EAAAA,IAAI,GAAG,MAAMzC,wBAAwB,CAACyC,IAAD,EAAOtC,WAAP,CAArC;AACAsD,EAAAA,cAAc;AACf,CAzDD","sourcesContent":["/* @flow weak */\nconst path = require(`path`)\nconst openurl = require(`better-opn`)\nconst fs = require(`fs-extra`)\nconst compression = require(`compression`)\nconst express = require(`express`)\nconst chalk = require(`chalk`)\nconst { match: reachMatch } = require(`@reach/router/lib/utils`)\nconst rl = require(`readline`)\nconst onExit = require(`signal-exit`)\nconst report = require(`gatsby-cli/lib/reporter`)\n\nconst telemetry = require(`gatsby-telemetry`)\n\nconst detectPortInUseAndPrompt = require(`../utils/detect-port-in-use-and-prompt`)\nconst getConfigFile = require(`../bootstrap/get-config-file`)\nconst preferDefault = require(`../bootstrap/prefer-default`)\n\nconst rlInterface = rl.createInterface({\n  input: process.stdin,\n  output: process.stdout,\n})\n\n// Quit immediately on hearing ctrl-c\nrlInterface.on(`SIGINT`, () => {\n  process.exit()\n})\n\nonExit(() => {\n  telemetry.trackCli(`SERVE_STOP`)\n})\n\nconst readMatchPaths = async program => {\n  const filePath = path.join(program.directory, `.cache`, `match-paths.json`)\n  let rawJSON = `[]`\n  try {\n    rawJSON = await fs.readFile(filePath)\n  } catch (error) {\n    report.warn(error)\n    report.warn(\n      `Could not read ${chalk.bold(\n        `match-paths.json`\n      )} from the .cache directory`\n    )\n    report.warn(\n      `Client-side routing will not work correctly. Maybe you need to re-run ${chalk.bold(\n        `gatsby build`\n      )}?`\n    )\n  }\n  return JSON.parse(rawJSON)\n}\n\nconst matchPathRouter = (matchPaths, options) => (req, res, next) => {\n  const { url } = req\n  if (req.accepts(`html`)) {\n    const matchPath = matchPaths.find(\n      ({ matchPath }) => reachMatch(matchPath, url) !== null\n    )\n    if (matchPath) {\n      return res.sendFile(\n        path.join(matchPath.path, `index.html`),\n        options,\n        err => {\n          if (err) {\n            next()\n          }\n        }\n      )\n    }\n  }\n  return next()\n}\n\nmodule.exports = async program => {\n  telemetry.trackCli(`SERVE_START`)\n  telemetry.startBackgroundUpdate()\n  let { prefixPaths, port, open, host } = program\n  port = typeof port === `string` ? parseInt(port, 10) : port\n\n  const config = await preferDefault(\n    getConfigFile(program.directory, `gatsby-config`)\n  )\n\n  const { pathPrefix: configPathPrefix } = config || {}\n\n  const pathPrefix = prefixPaths && configPathPrefix ? configPathPrefix : `/`\n\n  const root = path.join(program.directory, `public`)\n\n  const app = express()\n  const router = express.Router()\n\n  app.use(telemetry.expressMiddleware(`SERVE`))\n\n  router.use(compression())\n  router.use(express.static(`public`))\n  const matchPaths = await readMatchPaths(program)\n  router.use(matchPathRouter(matchPaths, { root }))\n  router.use((req, res, next) => {\n    if (req.accepts(`html`)) {\n      return res.status(404).sendFile(`404.html`, { root })\n    }\n    return next()\n  })\n  app.use(function(req, res, next) {\n    res.header(`Access-Control-Allow-Origin`, `http://${host}:${port}`)\n    res.header(`Access-Control-Allow-Credentials`, true)\n    res.header(\n      `Access-Control-Allow-Headers`,\n      `Origin, X-Requested-With, Content-Type, Accept`\n    )\n    next()\n  })\n  app.use(pathPrefix, router)\n\n  const startListening = () => {\n    app.listen(port, host, () => {\n      let openUrlString = `http://${host}:${port}${pathPrefix}`\n      report.info(`gatsby serve running at: ${chalk.bold(openUrlString)}`)\n      if (open) {\n        report.info(`Opening browser...`)\n        Promise.resolve(openurl(openUrlString)).catch(err =>\n          report.warn(`Browser not opened because no browser was found`)\n        )\n      }\n    })\n  }\n\n  port = await detectPortInUseAndPrompt(port, rlInterface)\n  startListening()\n}\n"],"file":"serve.js"}