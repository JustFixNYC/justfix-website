{"version":3,"sources":["../../../src/schema/extensions/index.js"],"names":["GraphQLDirective","DirectiveLocation","specifiedDirectives","require","link","fileByPath","getDateResolver","typeExtensions","infer","description","args","noDefaultResolvers","type","deprecationReason","dontInfer","mimeTypes","types","defaultValue","childOf","many","nodeInterface","locations","INTERFACE","builtInFieldExtensions","dateformat","name","formatString","locale","fromNow","difference","extend","fieldConfig","by","from","resolve","fileByRelativePath","proxy","fromNode","options","source","context","info","resolver","defaultFieldResolver","internalExtensionNames","map","directive","reservedExtensionNames","Object","keys","toDirectives","schemaComposer","extensions","defaultLocations","extension","createTC","normalizedArgs","typeMapper","convertArgConfigMap","addDirectives","fieldExtensions","fieldDirectives","FIELD_DEFINITION","forEach","addDirective","typeDirectives","OBJECT","processFieldExtensions","typeComposer","parentSpan","getFieldNames","fieldName","getFieldExtensions","filter","includes","prevFieldConfig","getFieldConfig","extendField","module","exports"],"mappings":"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","sourcesContent":["// @flow\nconst {\n  GraphQLDirective,\n  DirectiveLocation,\n  specifiedDirectives,\n} = require(`graphql`)\n\nconst { link, fileByPath } = require(`../resolvers`)\nconst { getDateResolver } = require(`../types/date`)\n\nimport type { GraphQLFieldConfigArgumentMap, GraphQLFieldConfig } from \"graphql\"\nimport type { ComposeFieldConfig, ComposeOutputType } from \"graphql-compose\"\n\nexport interface GraphQLFieldExtensionDefinition {\n  name: string;\n  type?: ComposeOutputType;\n  args?: GraphQLFieldConfigArgumentMap;\n  extend(\n    args: GraphQLFieldConfigArgumentMap,\n    prevFieldConfig: GraphQLFieldConfig\n  ): $Shape<ComposeFieldConfig>;\n}\n\nconst typeExtensions = {\n  infer: {\n    description: `Infer field types from field values.`,\n    args: {\n      noDefaultResolvers: {\n        type: `Boolean`,\n        description: `Don't add default resolvers to defined fields.`,\n        deprecationReason: `noDefaultResolvers is deprecated, annotate individual fields.`,\n      },\n    },\n  },\n  dontInfer: {\n    description: `Do not infer field types from field values.`,\n    args: {\n      noDefaultResolvers: {\n        type: `Boolean`,\n        description: `Don't add default resolvers to defined fields.`,\n        deprecationReason: `noDefaultResolvers is deprecated, annotate individual fields.`,\n      },\n    },\n  },\n  mimeTypes: {\n    description: `Define the mime-types handled by this type.`,\n    args: {\n      types: {\n        type: `[String!]!`,\n        defaultValue: [],\n        description: `The mime-types handled by this type.`,\n      },\n    },\n  },\n  childOf: {\n    description:\n      `Define parent-child relations between types. This is used to add ` +\n      `\\`child*\\` or \\`children*\\` convenience fields like \\`childImageSharp\\`.`,\n    args: {\n      mimeTypes: {\n        type: `[String!]!`,\n        defaultValue: [],\n        description:\n          `A list of mime-types this type is a child of. Usually these are ` +\n          `the mime-types handled by a transformer plugin.`,\n      },\n      types: {\n        type: `[String!]!`,\n        defaultValue: [],\n        description:\n          `A list of types this type is a child of. Usually these are the ` +\n          `types handled by a transformer plugin.`,\n      },\n      many: {\n        type: `Boolean!`,\n        defaultValue: false,\n        description: `Specifies whether a parent can have multiple children of this type or not.`,\n      },\n    },\n  },\n  nodeInterface: {\n    description:\n      `Adds root query fields for an interface. All implementing types ` +\n      `must also implement the Node interface.`,\n    locations: [DirectiveLocation.INTERFACE],\n  },\n}\n\nconst builtInFieldExtensions = {\n  dateformat: {\n    name: `dateformat`,\n    description: `Add date formating options.`,\n    args: {\n      formatString: `String`,\n      locale: `String`,\n      fromNow: `Boolean`,\n      difference: `String`,\n    },\n    extend(args, fieldConfig) {\n      return getDateResolver(args, fieldConfig)\n    },\n  },\n\n  link: {\n    name: `link`,\n    description: `Link to node by foreign-key relation.`,\n    args: {\n      by: {\n        type: `String!`,\n        defaultValue: `id`,\n      },\n      from: `String`,\n    },\n    extend(args, fieldConfig) {\n      return {\n        resolve: link(args, fieldConfig),\n      }\n    },\n  },\n\n  fileByRelativePath: {\n    name: `fileByRelativePath`,\n    description: `Link to File node by relative path.`,\n    args: {\n      from: `String`,\n    },\n    extend(args, fieldConfig) {\n      return {\n        resolve: fileByPath(args, fieldConfig),\n      }\n    },\n  },\n\n  proxy: {\n    name: `proxy`,\n    description: `Proxy resolver from another field.`,\n    args: {\n      from: `String!`,\n      fromNode: {\n        type: `Boolean!`,\n        defaultValue: false,\n      },\n    },\n    extend(options, fieldConfig) {\n      return {\n        resolve(source, args, context, info) {\n          const resolver = fieldConfig.resolve || context.defaultFieldResolver\n          return resolver(source, args, context, {\n            ...info,\n            from: options.from || info.from,\n            fromNode: options.from ? options.fromNode : info.fromNode,\n          })\n        },\n      }\n    },\n  },\n}\n\n// Reserved for internal use\nconst internalExtensionNames = [\n  `createdFrom`,\n  `default`,\n  `directives`,\n  `infer`,\n  `plugin`,\n  ...specifiedDirectives.map(directive => directive.name),\n]\nconst reservedExtensionNames = [\n  ...internalExtensionNames,\n  ...Object.keys(builtInFieldExtensions),\n]\n\nconst toDirectives = ({\n  schemaComposer,\n  extensions,\n  locations: defaultLocations,\n}) =>\n  Object.keys(extensions).map(name => {\n    const extension = extensions[name]\n    const { args, description, locations, type } = extension\n    // Allow field extensions to register a return type\n    if (type) {\n      schemaComposer.createTC(type)\n    }\n    // Support the `graphql-compose` style of directly providing the field type as string\n    const normalizedArgs = schemaComposer.typeMapper.convertArgConfigMap(args)\n    return new GraphQLDirective({\n      name,\n      args: normalizedArgs,\n      description,\n      locations: locations || defaultLocations,\n    })\n  })\n\nconst addDirectives = ({ schemaComposer, fieldExtensions = {} }) => {\n  const fieldDirectives = toDirectives({\n    schemaComposer,\n    extensions: fieldExtensions,\n    locations: [DirectiveLocation.FIELD_DEFINITION],\n  })\n  fieldDirectives.forEach(directive => schemaComposer.addDirective(directive))\n  const typeDirectives = toDirectives({\n    schemaComposer,\n    extensions: typeExtensions,\n    locations: [DirectiveLocation.OBJECT],\n  })\n  typeDirectives.forEach(directive => schemaComposer.addDirective(directive))\n}\n\nconst processFieldExtensions = ({\n  fieldExtensions = {},\n  schemaComposer,\n  typeComposer,\n  parentSpan,\n}) => {\n  typeComposer.getFieldNames().forEach(fieldName => {\n    const extensions = typeComposer.getFieldExtensions(fieldName)\n    Object.keys(extensions)\n      .filter(name => !internalExtensionNames.includes(name))\n      .forEach(name => {\n        const { extend } = fieldExtensions[name] || {}\n        if (typeof extend === `function`) {\n          // Always get fresh field config as it will have been changed\n          // by previous field extension\n          const prevFieldConfig = typeComposer.getFieldConfig(fieldName)\n          typeComposer.extendField(\n            fieldName,\n            extend(extensions[name], prevFieldConfig)\n          )\n        }\n      })\n  })\n}\n\nmodule.exports = {\n  addDirectives,\n  builtInFieldExtensions,\n  internalExtensionNames,\n  processFieldExtensions,\n  reservedExtensionNames,\n}\n"],"file":"index.js"}