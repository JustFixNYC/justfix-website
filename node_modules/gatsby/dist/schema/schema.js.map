{"version":3,"sources":["../../src/schema/schema.js"],"names":["_","require","invariant","isSpecifiedScalarType","isIntrospectionType","assertValidName","parse","GraphQLNonNull","GraphQLList","ObjectTypeComposer","InterfaceTypeComposer","UnionTypeComposer","InputTypeComposer","ScalarTypeComposer","EnumTypeComposer","apiRunner","report","addNodeInterfaceFields","addInferredType","addInferredTypes","findOne","findManyPaginated","processFieldExtensions","internalExtensionNames","getPagination","getSortInput","getFilterInput","isGatsbyType","GatsbyGraphQLTypeKind","printTypeDefinitions","buildSchema","schemaComposer","nodeStore","types","typeMapping","fieldExtensions","thirdPartySchemas","printConfig","typeConflictReporter","parentSpan","updateSchemaComposer","schema","rebuildSchemaWithSitePage","typeComposer","getOTC","shouldInfer","hasExtension","getExtension","processTypeComposer","module","exports","addTypes","config","addSetFieldsOnGraphQLNodeTypeFields","Promise","all","Array","from","Set","values","map","checkQueryableInterfaces","addConvenienceChildrenFields","addThirdPartySchemas","addCustomResolveFunctions","hasInterface","addImplicitConvenienceChildrenFields","addTypeToRootQuery","forEach","typeOrTypeDef","plugin","parsedTypes","createdFrom","parseTypeDefs","typeDefs","error","reportParsingError","type","processAddedType","createTypeComposerFromGatsbyType","typeName","getTypeName","checkIsAllowedTypeName","has","get","mergeTypes","name","typeOwner","merge","isNamedTypeComposer","extendExtensions","getExtensions","addExtensions","warn","addAsComposer","getResolveType","setResolveType","node","internal","addSchemaMustHaveType","setExtension","directives","getDirectives","args","noDefaultResolvers","hasField","getFieldType","toString","panic","getFieldNames","fieldName","setFieldExtension","getFieldDirectives","getFieldExtensions","Object","keys","filter","includes","definition","getDirective","defaultValue","undefined","arg","argumentDef","find","value","validate","message","endsWith","kind","OBJECT","createTemp","interfaces","iface","getIFTC","getType","INPUT_OBJECT","UNION","INTERFACE","ENUM","SCALAR","JSON","stringify","tc","result","nodes","getNodesByType","traceId","fields","addNestedFields","schemaQueryType","getQueryType","queryTC","createTempTC","processThirdPartyTypeFields","Query","addFields","getFields","getTypeMap","createTC","field","getField","fieldType","replace","extendField","intermediateSchema","createResolvers","resolvers","fieldConfig","originalFieldConfig","getFieldConfig","originalTypeName","originalResolver","resolve","fieldTypeName","isArray","stringifyArray","newConfig","source","context","info","defaultFieldResolver","parentTypesToChildren","Map","mimeTypesToChildren","typesHandlingMimeTypes","mimeType","set","add","mimeTypes","many","parentType","children","parent","getAnyTC","child","createChildrenField","createChildField","parentTypes","childNodesByType","groupChildNodesByType","typeChildren","maxChildCount","maxBy","groupBy","c","g","length","camelCase","path","nodeModel","getNodesByIds","ids","flatMap","getNode","removeInputTypeComposer","sortInputTC","filterInputTC","paginationTC","queryName","queryNamePlural","sort","skip","limit","makeFieldNonNull","parseTypes","doc","definitions","def","parsedType","typeMapper","makeSchemaDef","push","locations","codeFrameColumns","frame","body","start","linesAbove","linesBelow","arr","item","Error","ofType","v","parseValue","queryableInterfaces","incorrectTypes","getInterfaces","some","t","join"],"mappings":"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","sourcesContent":["const _ = require(`lodash`)\nconst invariant = require(`invariant`)\nconst {\n  isSpecifiedScalarType,\n  isIntrospectionType,\n  assertValidName,\n  parse,\n  GraphQLNonNull,\n  GraphQLList,\n} = require(`graphql`)\nconst {\n  ObjectTypeComposer,\n  InterfaceTypeComposer,\n  UnionTypeComposer,\n  InputTypeComposer,\n  ScalarTypeComposer,\n  EnumTypeComposer,\n} = require(`graphql-compose`)\n\nconst apiRunner = require(`../utils/api-runner-node`)\nconst report = require(`gatsby-cli/lib/reporter`)\nconst { addNodeInterfaceFields } = require(`./types/node-interface`)\nconst { addInferredType, addInferredTypes } = require(`./infer`)\nconst { findOne, findManyPaginated } = require(`./resolvers`)\nconst {\n  processFieldExtensions,\n  internalExtensionNames,\n} = require(`./extensions`)\nconst { getPagination } = require(`./types/pagination`)\nconst { getSortInput } = require(`./types/sort`)\nconst { getFilterInput } = require(`./types/filter`)\nconst { isGatsbyType, GatsbyGraphQLTypeKind } = require(`./types/type-builders`)\nconst { printTypeDefinitions } = require(`./print`)\n\nconst buildSchema = async ({\n  schemaComposer,\n  nodeStore,\n  types,\n  typeMapping,\n  fieldExtensions,\n  thirdPartySchemas,\n  printConfig,\n  typeConflictReporter,\n  parentSpan,\n}) => {\n  await updateSchemaComposer({\n    schemaComposer,\n    nodeStore,\n    types,\n    typeMapping,\n    fieldExtensions,\n    thirdPartySchemas,\n    printConfig,\n    typeConflictReporter,\n    parentSpan,\n  })\n  // const { printSchema } = require(`graphql`)\n  const schema = schemaComposer.buildSchema()\n  // console.log(printSchema(schema))\n  return schema\n}\n\nconst rebuildSchemaWithSitePage = async ({\n  schemaComposer,\n  nodeStore,\n  typeMapping,\n  fieldExtensions,\n  typeConflictReporter,\n  parentSpan,\n}) => {\n  const typeComposer = schemaComposer.getOTC(`SitePage`)\n  const shouldInfer =\n    !typeComposer.hasExtension(`infer`) ||\n    typeComposer.getExtension(`infer`) !== false\n  if (shouldInfer) {\n    addInferredType({\n      schemaComposer,\n      typeComposer,\n      nodeStore,\n      typeConflictReporter,\n      typeMapping,\n      parentSpan,\n    })\n  }\n  await processTypeComposer({\n    schemaComposer,\n    typeComposer,\n    fieldExtensions,\n    nodeStore,\n    parentSpan,\n  })\n  return schemaComposer.buildSchema()\n}\n\nmodule.exports = {\n  buildSchema,\n  rebuildSchemaWithSitePage,\n}\n\nconst updateSchemaComposer = async ({\n  schemaComposer,\n  nodeStore,\n  types,\n  typeMapping,\n  fieldExtensions,\n  thirdPartySchemas,\n  printConfig,\n  typeConflictReporter,\n  parentSpan,\n}) => {\n  await addTypes({ schemaComposer, parentSpan, types })\n  await addInferredTypes({\n    schemaComposer,\n    nodeStore,\n    typeConflictReporter,\n    typeMapping,\n    parentSpan,\n  })\n  await printTypeDefinitions({ config: printConfig, schemaComposer })\n  await addSetFieldsOnGraphQLNodeTypeFields({\n    schemaComposer,\n    nodeStore,\n    parentSpan,\n  })\n  await Promise.all(\n    Array.from(new Set(schemaComposer.values())).map(typeComposer =>\n      processTypeComposer({\n        schemaComposer,\n        typeComposer,\n        fieldExtensions,\n        nodeStore,\n        parentSpan,\n      })\n    )\n  )\n  checkQueryableInterfaces({ schemaComposer })\n  await addConvenienceChildrenFields({ schemaComposer, parentSpan })\n  await addThirdPartySchemas({ schemaComposer, thirdPartySchemas, parentSpan })\n  await addCustomResolveFunctions({ schemaComposer, parentSpan })\n}\n\nconst processTypeComposer = async ({\n  schemaComposer,\n  typeComposer,\n  fieldExtensions,\n  nodeStore,\n  parentSpan,\n}) => {\n  if (typeComposer instanceof ObjectTypeComposer) {\n    await processFieldExtensions({\n      schemaComposer,\n      typeComposer,\n      fieldExtensions,\n      parentSpan,\n    })\n    if (typeComposer.hasInterface(`Node`)) {\n      await addNodeInterfaceFields({ schemaComposer, typeComposer, parentSpan })\n      await addImplicitConvenienceChildrenFields({\n        schemaComposer,\n        typeComposer,\n        nodeStore,\n        parentSpan,\n      })\n      await addTypeToRootQuery({ schemaComposer, typeComposer, parentSpan })\n    }\n  } else if (typeComposer instanceof InterfaceTypeComposer) {\n    if (typeComposer.getExtension(`nodeInterface`)) {\n      // We only process field extensions for queryable Node interfaces, so we get\n      // the input args on the root query type, e.g. `formatString` etc. for `dateformat`\n      await processFieldExtensions({\n        schemaComposer,\n        typeComposer,\n        fieldExtensions,\n        parentSpan,\n      })\n      await addTypeToRootQuery({ schemaComposer, typeComposer, parentSpan })\n    }\n  }\n}\n\nconst addTypes = ({ schemaComposer, types, parentSpan }) => {\n  types.forEach(({ typeOrTypeDef, plugin }) => {\n    if (typeof typeOrTypeDef === `string`) {\n      let parsedTypes\n      const createdFrom = `sdl`\n      try {\n        parsedTypes = parseTypeDefs({\n          typeDefs: typeOrTypeDef,\n          plugin,\n          createdFrom,\n          schemaComposer,\n          parentSpan,\n        })\n      } catch (error) {\n        reportParsingError(error)\n        return\n      }\n      parsedTypes.forEach(type => {\n        processAddedType({\n          schemaComposer,\n          type,\n          parentSpan,\n          createdFrom,\n          plugin,\n        })\n      })\n    } else if (isGatsbyType(typeOrTypeDef)) {\n      const type = createTypeComposerFromGatsbyType({\n        schemaComposer,\n        type: typeOrTypeDef,\n        parentSpan,\n      })\n\n      if (type) {\n        const typeName = type.getTypeName()\n        const createdFrom = `typeBuilder`\n        checkIsAllowedTypeName(typeName)\n        if (schemaComposer.has(typeName)) {\n          const typeComposer = schemaComposer.get(typeName)\n          mergeTypes({\n            schemaComposer,\n            typeComposer,\n            type,\n            plugin,\n            createdFrom,\n            parentSpan,\n          })\n        } else {\n          processAddedType({\n            schemaComposer,\n            type,\n            parentSpan,\n            createdFrom,\n            plugin,\n          })\n        }\n      }\n    } else {\n      const typeName = typeOrTypeDef.name\n      const createdFrom = `graphql-js`\n      checkIsAllowedTypeName(typeName)\n      if (schemaComposer.has(typeName)) {\n        const typeComposer = schemaComposer.get(typeName)\n        mergeTypes({\n          schemaComposer,\n          typeComposer,\n          type: typeOrTypeDef,\n          plugin,\n          createdFrom,\n          parentSpan,\n        })\n      } else {\n        processAddedType({\n          schemaComposer,\n          type: typeOrTypeDef,\n          parentSpan,\n          createdFrom,\n          plugin,\n        })\n      }\n    }\n  })\n}\n\nconst mergeTypes = ({\n  schemaComposer,\n  typeComposer,\n  type,\n  plugin,\n  createdFrom,\n  parentSpan,\n}) => {\n  // Only allow user or plugin owning the type to extend already existing type.\n  const typeOwner = typeComposer.getExtension(`plugin`)\n  if (\n    !plugin ||\n    plugin.name === `default-site-plugin` ||\n    plugin.name === typeOwner\n  ) {\n    typeComposer.merge(type)\n    if (isNamedTypeComposer(type)) {\n      typeComposer.extendExtensions(type.getExtensions())\n    }\n    addExtensions({ schemaComposer, typeComposer, plugin, createdFrom })\n    return true\n  } else {\n    report.warn(\n      `Plugin \\`${plugin.name}\\` tried to define the GraphQL type ` +\n        `\\`${typeComposer.getTypeName()}\\`, which has already been defined ` +\n        `by the plugin \\`${typeOwner}\\`.`\n    )\n    return false\n  }\n}\n\nconst processAddedType = ({\n  schemaComposer,\n  type,\n  parentSpan,\n  createdFrom,\n  plugin,\n}) => {\n  const typeName = schemaComposer.addAsComposer(type)\n  const typeComposer = schemaComposer.get(typeName)\n  if (\n    typeComposer instanceof InterfaceTypeComposer ||\n    typeComposer instanceof UnionTypeComposer\n  ) {\n    if (!typeComposer.getResolveType()) {\n      typeComposer.setResolveType(node => node.internal.type)\n    }\n  }\n  schemaComposer.addSchemaMustHaveType(typeComposer)\n\n  addExtensions({ schemaComposer, typeComposer, plugin, createdFrom })\n\n  return typeComposer\n}\n\nconst addExtensions = ({\n  schemaComposer,\n  typeComposer,\n  plugin,\n  createdFrom,\n}) => {\n  typeComposer.setExtension(`createdFrom`, createdFrom)\n  typeComposer.setExtension(`plugin`, plugin ? plugin.name : null)\n\n  if (createdFrom === `sdl`) {\n    const directives = typeComposer.getDirectives()\n    directives.forEach(({ name, args }) => {\n      switch (name) {\n        case `infer`:\n        case `dontInfer`:\n          typeComposer.setExtension(`infer`, name === `infer`)\n          if (args.noDefaultResolvers != null) {\n            typeComposer.setExtension(\n              `addDefaultResolvers`,\n              !args.noDefaultResolvers\n            )\n          }\n          break\n        case `mimeTypes`:\n          typeComposer.setExtension(`mimeTypes`, args)\n          break\n        case `childOf`:\n          typeComposer.setExtension(`childOf`, args)\n          break\n        case `nodeInterface`:\n          if (typeComposer instanceof InterfaceTypeComposer) {\n            if (\n              !typeComposer.hasField(`id`) ||\n              typeComposer.getFieldType(`id`).toString() !== `ID!`\n            ) {\n              report.panic(\n                `Interfaces with the \\`nodeInterface\\` extension must have a field ` +\n                  `\\`id\\` of type \\`ID!\\`. Check the type definition of ` +\n                  `\\`${typeComposer.getTypeName()}\\`.`\n              )\n            }\n            typeComposer.setExtension(`nodeInterface`, true)\n          }\n          break\n        default:\n      }\n    })\n  }\n\n  if (\n    typeComposer instanceof ObjectTypeComposer ||\n    typeComposer instanceof InterfaceTypeComposer ||\n    typeComposer instanceof InputTypeComposer\n  ) {\n    typeComposer.getFieldNames().forEach(fieldName => {\n      typeComposer.setFieldExtension(fieldName, `createdFrom`, createdFrom)\n      typeComposer.setFieldExtension(\n        fieldName,\n        `plugin`,\n        plugin ? plugin.name : null\n      )\n\n      if (createdFrom === `sdl`) {\n        const directives = typeComposer.getFieldDirectives(fieldName)\n        directives.forEach(({ name, args }) => {\n          typeComposer.setFieldExtension(fieldName, name, args)\n        })\n      }\n\n      // Validate field extension args. `graphql-compose` already checks the\n      // type of directive args in `parseDirectives`, but we want to check\n      // extensions provided with type builders as well. Also, we warn if an\n      // extension option was provided which does not exist in the field\n      // extension definition.\n      const fieldExtensions = typeComposer.getFieldExtensions(fieldName)\n      const typeName = typeComposer.getTypeName()\n      Object.keys(fieldExtensions)\n        .filter(name => !internalExtensionNames.includes(name))\n        .forEach(name => {\n          const args = fieldExtensions[name]\n\n          if (!args || typeof args !== `object`) {\n            report.error(\n              `Field extension arguments must be provided as an object. ` +\n                `Received \"${args}\" on \\`${typeName}.${fieldName}\\`.`\n            )\n            return\n          }\n\n          try {\n            const definition = schemaComposer.getDirective(name)\n\n            // Handle `defaultValue` when not provided as directive\n            definition.args.forEach(({ name, defaultValue }) => {\n              if (args[name] === undefined && defaultValue !== undefined) {\n                args[name] = defaultValue\n              }\n            })\n\n            Object.keys(args).forEach(arg => {\n              const argumentDef = definition.args.find(\n                ({ name }) => name === arg\n              )\n              if (!argumentDef) {\n                report.error(\n                  `Field extension \\`${name}\\` on \\`${typeName}.${fieldName}\\` ` +\n                    `has invalid argument \\`${arg}\\`.`\n                )\n                return\n              }\n              const value = args[arg]\n              try {\n                validate(argumentDef.type, value)\n              } catch (error) {\n                report.error(\n                  `Field extension \\`${name}\\` on \\`${typeName}.${fieldName}\\` ` +\n                    `has argument \\`${arg}\\` with invalid value \"${value}\". ` +\n                    error.message\n                )\n              }\n            })\n          } catch (error) {\n            report.error(\n              `Field extension \\`${name}\\` on \\`${typeName}.${fieldName}\\` ` +\n                `is not available.`\n            )\n          }\n        })\n    })\n  }\n\n  if (typeComposer.hasExtension(`addDefaultResolvers`)) {\n    report.warn(\n      `Deprecation warning - \"noDefaultResolvers\" is deprecated. In Gatsby 3, ` +\n        `defined fields won't get resolvers, unless explicitly added with a ` +\n        `directive/extension.`\n    )\n  }\n\n  return typeComposer\n}\n\nconst checkIsAllowedTypeName = name => {\n  invariant(\n    name !== `Node`,\n    `The GraphQL type \\`Node\\` is reserved for internal use.`\n  )\n  invariant(\n    !name.endsWith(`FilterInput`) && !name.endsWith(`SortInput`),\n    `GraphQL type names ending with \"FilterInput\" or \"SortInput\" are ` +\n      `reserved for internal use. Please rename \\`${name}\\`.`\n  )\n  invariant(\n    ![`Boolean`, `Date`, `Float`, `ID`, `Int`, `JSON`, `String`].includes(name),\n    `The GraphQL type \\`${name}\\` is reserved for internal use by ` +\n      `built-in scalar types.`\n  )\n  assertValidName(name)\n}\n\nconst createTypeComposerFromGatsbyType = ({\n  schemaComposer,\n  type,\n  parentSpan,\n}) => {\n  switch (type.kind) {\n    case GatsbyGraphQLTypeKind.OBJECT: {\n      return ObjectTypeComposer.createTemp(\n        {\n          ...type.config,\n          interfaces: () => {\n            if (type.config.interfaces) {\n              return type.config.interfaces.map(iface => {\n                if (typeof iface === `string`) {\n                  return schemaComposer.getIFTC(iface).getType()\n                } else {\n                  return iface\n                }\n              })\n            } else {\n              return []\n            }\n          },\n        },\n        schemaComposer\n      )\n    }\n    case GatsbyGraphQLTypeKind.INPUT_OBJECT: {\n      return InputTypeComposer.createTemp(type.config, schemaComposer)\n    }\n    case GatsbyGraphQLTypeKind.UNION: {\n      return UnionTypeComposer.createTemp(\n        {\n          ...type.config,\n          types: () => {\n            if (type.config.types) {\n              return type.config.types.map(typeName =>\n                schemaComposer.getOTC(typeName).getType()\n              )\n            } else {\n              return []\n            }\n          },\n        },\n        schemaComposer\n      )\n    }\n    case GatsbyGraphQLTypeKind.INTERFACE: {\n      return InterfaceTypeComposer.createTemp(type.config, schemaComposer)\n    }\n    case GatsbyGraphQLTypeKind.ENUM: {\n      return EnumTypeComposer.createTemp(type.config, schemaComposer)\n    }\n    case GatsbyGraphQLTypeKind.SCALAR: {\n      return ScalarTypeComposer.createTemp(type.config, schemaComposer)\n    }\n    default: {\n      report.warn(`Illegal type definition: ${JSON.stringify(type.config)}`)\n      return null\n    }\n  }\n}\n\nconst addSetFieldsOnGraphQLNodeTypeFields = ({\n  schemaComposer,\n  nodeStore,\n  parentSpan,\n}) =>\n  Promise.all(\n    Array.from(schemaComposer.values()).map(async tc => {\n      if (tc instanceof ObjectTypeComposer && tc.hasInterface(`Node`)) {\n        const typeName = tc.getTypeName()\n        const result = await apiRunner(`setFieldsOnGraphQLNodeType`, {\n          type: {\n            name: typeName,\n            nodes: nodeStore.getNodesByType(typeName),\n          },\n          traceId: `initial-setFieldsOnGraphQLNodeType`,\n          parentSpan,\n        })\n        if (result) {\n          // NOTE: `setFieldsOnGraphQLNodeType` only allows setting\n          // nested fields with a path as property name, i.e.\n          // `{ 'frontmatter.published': 'Boolean' }`, but not in the form\n          // `{ frontmatter: { published: 'Boolean' }}`\n          result.forEach(fields => tc.addNestedFields(fields))\n        }\n      }\n    })\n  )\n\nconst addThirdPartySchemas = ({\n  schemaComposer,\n  thirdPartySchemas,\n  parentSpan,\n}) => {\n  thirdPartySchemas.forEach(schema => {\n    const schemaQueryType = schema.getQueryType()\n    const queryTC = schemaComposer.createTempTC(schemaQueryType)\n    processThirdPartyTypeFields({ typeComposer: queryTC, schemaQueryType })\n    schemaComposer.Query.addFields(queryTC.getFields())\n\n    // Explicitly add the third-party schema's types, so they can be targeted\n    // in `createResolvers` API.\n    const types = schema.getTypeMap()\n    Object.keys(types).forEach(typeName => {\n      const type = types[typeName]\n      if (\n        type !== schemaQueryType &&\n        !isSpecifiedScalarType(type) &&\n        !isIntrospectionType(type) &&\n        type.name !== `Date` &&\n        type.name !== `JSON`\n      ) {\n        const typeComposer = schemaComposer.createTC(type)\n        if (\n          typeComposer instanceof ObjectTypeComposer ||\n          typeComposer instanceof InterfaceTypeComposer\n        ) {\n          processThirdPartyTypeFields({ typeComposer, schemaQueryType })\n        }\n        typeComposer.setExtension(`createdFrom`, `thirdPartySchema`)\n        schemaComposer.addSchemaMustHaveType(typeComposer)\n      }\n    })\n  })\n}\n\nconst processThirdPartyTypeFields = ({ typeComposer, schemaQueryType }) => {\n  // Fix for types that refer to Query. Thanks Relay Classic!\n  typeComposer.getFieldNames().forEach(fieldName => {\n    const field = typeComposer.getField(fieldName)\n    const fieldType = field.type.toString()\n    if (fieldType.replace(/[[\\]!]/g, ``) === schemaQueryType.name) {\n      typeComposer.extendField(fieldName, {\n        type: fieldType.replace(schemaQueryType.name, `Query`),\n      })\n    }\n  })\n}\n\nconst addCustomResolveFunctions = async ({ schemaComposer, parentSpan }) => {\n  const intermediateSchema = schemaComposer.buildSchema()\n  const createResolvers = resolvers => {\n    Object.keys(resolvers).forEach(typeName => {\n      const fields = resolvers[typeName]\n      if (schemaComposer.has(typeName)) {\n        const tc = schemaComposer.getOTC(typeName)\n        Object.keys(fields).forEach(fieldName => {\n          const fieldConfig = fields[fieldName]\n          if (tc.hasField(fieldName)) {\n            const originalFieldConfig = tc.getFieldConfig(fieldName)\n            const originalTypeName = originalFieldConfig.type.toString()\n            const originalResolver = originalFieldConfig.resolve\n            let fieldTypeName\n            if (fieldConfig.type) {\n              fieldTypeName = Array.isArray(fieldConfig.type)\n                ? stringifyArray(fieldConfig.type)\n                : fieldConfig.type.toString()\n            }\n\n            if (\n              !fieldTypeName ||\n              fieldTypeName.replace(/!/g, ``) ===\n                originalTypeName.replace(/!/g, ``) ||\n              tc.getExtension(`createdFrom`) === `thirdPartySchema`\n            ) {\n              const newConfig = {}\n              if (fieldConfig.type) {\n                newConfig.type = fieldConfig.type\n              }\n              if (fieldConfig.args) {\n                newConfig.args = fieldConfig.args\n              }\n              if (fieldConfig.resolve) {\n                newConfig.resolve = (source, args, context, info) =>\n                  fieldConfig.resolve(source, args, context, {\n                    ...info,\n                    originalResolver:\n                      originalResolver || context.defaultFieldResolver,\n                  })\n              }\n              tc.extendField(fieldName, newConfig)\n            } else if (fieldTypeName) {\n              report.warn(\n                `\\`createResolvers\\` passed resolvers for field ` +\n                  `\\`${typeName}.${fieldName}\\` with type \\`${fieldTypeName}\\`. ` +\n                  `Such a field with type \\`${originalTypeName}\\` already exists ` +\n                  `on the type. Use \\`createTypes\\` to override type fields.`\n              )\n            }\n          } else {\n            tc.addFields({ [fieldName]: fieldConfig })\n          }\n        })\n      } else {\n        report.warn(\n          `\\`createResolvers\\` passed resolvers for type \\`${typeName}\\` that ` +\n            `doesn't exist in the schema. Use \\`createTypes\\` to add the type ` +\n            `before adding resolvers.`\n        )\n      }\n    })\n  }\n  await apiRunner(`createResolvers`, {\n    intermediateSchema,\n    createResolvers,\n    traceId: `initial-createResolvers`,\n    parentSpan,\n  })\n}\n\nconst addConvenienceChildrenFields = ({ schemaComposer }) => {\n  const parentTypesToChildren = new Map()\n  const mimeTypesToChildren = new Map()\n  const typesHandlingMimeTypes = new Map()\n\n  schemaComposer.forEach(type => {\n    if (\n      (type instanceof ObjectTypeComposer ||\n        type instanceof InterfaceTypeComposer) &&\n      type.hasExtension(`mimeTypes`)\n    ) {\n      const { types } = type.getExtension(`mimeTypes`)\n      new Set(types).forEach(mimeType => {\n        if (!typesHandlingMimeTypes.has(mimeType)) {\n          typesHandlingMimeTypes.set(mimeType, new Set())\n        }\n        typesHandlingMimeTypes.get(mimeType).add(type)\n      })\n    }\n\n    if (\n      (type instanceof ObjectTypeComposer ||\n        type instanceof InterfaceTypeComposer) &&\n      type.hasExtension(`childOf`)\n    ) {\n      if (type instanceof ObjectTypeComposer && !type.hasInterface(`Node`)) {\n        report.error(\n          `The \\`childOf\\` extension can only be used on types that implement the \\`Node\\` interface.\\n` +\n            `Check the type definition of \\`${type.getTypeName()}\\`.`\n        )\n        return\n      }\n      if (\n        type instanceof InterfaceTypeComposer &&\n        !type.hasExtension(`nodeInterface`)\n      ) {\n        report.error(\n          `The \\`childOf\\` extension can only be used on interface types that ` +\n            `have the \\`@nodeInterface\\` extension.\\n` +\n            `Check the type definition of \\`${type.getTypeName()}\\`.`\n        )\n        return\n      }\n\n      const { types, mimeTypes, many } = type.getExtension(`childOf`)\n      new Set(types).forEach(parentType => {\n        if (!parentTypesToChildren.has(parentType)) {\n          parentTypesToChildren.set(parentType, new Map())\n        }\n        parentTypesToChildren.get(parentType).set(type, many)\n      })\n      new Set(mimeTypes).forEach(mimeType => {\n        if (!mimeTypesToChildren.has(mimeType)) {\n          mimeTypesToChildren.set(mimeType, new Map())\n        }\n        mimeTypesToChildren.get(mimeType).set(type, many)\n      })\n    }\n  })\n\n  parentTypesToChildren.forEach((children, parent) => {\n    if (!schemaComposer.has(parent)) return\n    const typeComposer = schemaComposer.getAnyTC(parent)\n    if (\n      typeComposer instanceof InterfaceTypeComposer &&\n      !typeComposer.hasExtension(`nodeInterface`)\n    ) {\n      report.error(\n        `With the \\`childOf\\` extension, children fields can only be added to ` +\n          `interfaces which have the \\`@nodeInterface\\` extension.\\n` +\n          `Check the type definition of \\`${typeComposer.getTypeName()}\\`.`\n      )\n      return\n    }\n    children.forEach((many, child) => {\n      if (many) {\n        typeComposer.addFields(createChildrenField(child.getTypeName()))\n      } else {\n        typeComposer.addFields(createChildField(child.getTypeName()))\n      }\n    })\n  })\n\n  mimeTypesToChildren.forEach((children, mimeType) => {\n    const parentTypes = typesHandlingMimeTypes.get(mimeType)\n    if (parentTypes) {\n      parentTypes.forEach(typeComposer => {\n        if (\n          typeComposer instanceof InterfaceTypeComposer &&\n          !typeComposer.hasExtension(`nodeInterface`)\n        ) {\n          report.error(\n            `With the \\`childOf\\` extension, children fields can only be added to ` +\n              `interfaces which have the \\`@nodeInterface\\` extension.\\n` +\n              `Check the type definition of \\`${typeComposer.getTypeName()}\\`.`\n          )\n          return\n        }\n        children.forEach((many, child) => {\n          if (many) {\n            typeComposer.addFields(createChildrenField(child.getTypeName()))\n          } else {\n            typeComposer.addFields(createChildField(child.getTypeName()))\n          }\n        })\n      })\n    }\n  })\n}\n\nconst addImplicitConvenienceChildrenFields = ({\n  schemaComposer,\n  typeComposer,\n  nodeStore,\n}) => {\n  const shouldInfer = typeComposer.getExtension(`infer`)\n  // In Gatsby v3, when `@dontInfer` is set, children fields will not be\n  // created for parent-child relations set by plugins with\n  // `createParentChildLink`. With `@dontInfer`, only parent-child\n  // relations explicitly set with the `childOf` extension will be added.\n  // if (shouldInfer === false) return\n\n  const nodes = nodeStore.getNodesByType(typeComposer.getTypeName())\n\n  const childNodesByType = groupChildNodesByType({ nodeStore, nodes })\n\n  Object.keys(childNodesByType).forEach(typeName => {\n    const typeChildren = childNodesByType[typeName]\n    const maxChildCount = _.maxBy(\n      _.values(_.groupBy(typeChildren, c => c.parent)),\n      g => g.length\n    ).length\n\n    // Adding children fields to types with the `@dontInfer` extension is deprecated\n    if (shouldInfer === false) {\n      const fieldName = _.camelCase(\n        `${maxChildCount > 1 ? `children` : `child`} ${typeName}`\n      )\n      if (!typeComposer.hasField(fieldName)) {\n        report.warn(\n          `On types with the \\`@dontInfer\\` directive, or with the \\`infer\\` ` +\n            `extension set to \\`false\\`, automatically adding fields for ` +\n            `children types is deprecated.\\n` +\n            `In Gatsby v3, only children fields explicitly set with the ` +\n            `\\`childOf\\` extension will be added.\\n` +\n            `For example, in Gatsby v3, \\`${typeComposer.getTypeName()}\\` will ` +\n            `not get a \\`${fieldName}\\` field.`\n        )\n      }\n    }\n\n    if (maxChildCount > 1) {\n      typeComposer.addFields(createChildrenField(typeName))\n    } else {\n      typeComposer.addFields(createChildField(typeName))\n    }\n  })\n}\n\nconst createChildrenField = typeName => {\n  return {\n    [_.camelCase(`children ${typeName}`)]: {\n      type: () => [typeName],\n      resolve(source, args, context) {\n        const { path } = context\n        return context.nodeModel.getNodesByIds(\n          { ids: source.children, type: typeName },\n          { path }\n        )\n      },\n    },\n  }\n}\n\nconst createChildField = typeName => {\n  return {\n    [_.camelCase(`child ${typeName}`)]: {\n      type: () => typeName,\n      async resolve(source, args, context) {\n        const { path } = context\n        const result = await context.nodeModel.getNodesByIds(\n          { ids: source.children, type: typeName },\n          { path }\n        )\n        if (result && result.length > 0) {\n          return result[0]\n        } else {\n          return null\n        }\n      },\n    },\n  }\n}\n\nconst groupChildNodesByType = ({ nodeStore, nodes }) =>\n  _(nodes)\n    .flatMap(node => (node.children || []).map(nodeStore.getNode))\n    .groupBy(node => (node.internal ? node.internal.type : undefined))\n    .value()\n\nconst addTypeToRootQuery = ({ schemaComposer, typeComposer }) => {\n  // TODO: We should have an abstraction for keeping and clearing\n  // related TypeComposers and InputTypeComposers.\n  // Also see the comment on the skipped test in `rebuild-schema`.\n  typeComposer.removeInputTypeComposer()\n\n  const sortInputTC = getSortInput({\n    schemaComposer,\n    typeComposer,\n  })\n  const filterInputTC = getFilterInput({\n    schemaComposer,\n    typeComposer,\n  })\n  const paginationTC = getPagination({\n    schemaComposer,\n    typeComposer,\n  })\n\n  const typeName = typeComposer.getTypeName()\n  // not strictly correctly, result is `npmPackage` and `allNpmPackage` from type `NPMPackage`\n  const queryName = _.camelCase(typeName)\n  const queryNamePlural = _.camelCase(`all ${typeName}`)\n\n  schemaComposer.Query.addFields({\n    [queryName]: {\n      type: typeComposer,\n      args: {\n        ...filterInputTC.getFields(),\n      },\n      resolve: findOne(typeName),\n    },\n    [queryNamePlural]: {\n      type: paginationTC,\n      args: {\n        filter: filterInputTC,\n        sort: sortInputTC,\n        skip: `Int`,\n        limit: `Int`,\n      },\n      resolve: findManyPaginated(typeName),\n    },\n  }).makeFieldNonNull([queryNamePlural])\n}\n\nconst parseTypes = ({\n  doc,\n  plugin,\n  createdFrom,\n  schemaComposer,\n  parentSpan,\n}) => {\n  const types = []\n  doc.definitions.forEach(def => {\n    const name = def.name.value\n    checkIsAllowedTypeName(name)\n\n    if (schemaComposer.has(name)) {\n      // We don't check if ast.kind matches composer type, but rely\n      // that this will throw when something is wrong and get\n      // reported by `reportParsingError`.\n\n      // Keep the original type composer around\n      const typeComposer = schemaComposer.get(name)\n\n      // After this, the parsed type composer will be registered as the composer\n      // handling the type name\n      const parsedType = schemaComposer.typeMapper.makeSchemaDef(def)\n\n      // Merge the parsed type with the original\n      mergeTypes({\n        schemaComposer,\n        typeComposer,\n        type: parsedType,\n        plugin,\n        createdFrom,\n        parentSpan,\n      })\n\n      // Set the original type composer (with the merged fields added)\n      // as the correct composer for the type name\n      schemaComposer.typeMapper.set(typeComposer.getTypeName(), typeComposer)\n    } else {\n      const parsedType = schemaComposer.typeMapper.makeSchemaDef(def)\n      types.push(parsedType)\n    }\n  })\n  return types\n}\n\nconst parseTypeDefs = ({\n  typeDefs,\n  plugin,\n  createdFrom,\n  schemaComposer,\n  parentSpan,\n}) => {\n  const doc = parse(typeDefs)\n  return parseTypes({ doc, plugin, createdFrom, schemaComposer, parentSpan })\n}\n\nconst reportParsingError = error => {\n  const { message, source, locations } = error\n\n  if (source && locations && locations.length) {\n    const { codeFrameColumns } = require(`@babel/code-frame`)\n\n    const frame = codeFrameColumns(\n      source.body,\n      { start: locations[0] },\n      { linesAbove: 5, linesBelow: 5 }\n    )\n    report.panic(\n      `Encountered an error parsing the provided GraphQL type definitions:\\n` +\n        message +\n        `\\n\\n` +\n        frame +\n        `\\n`\n    )\n  } else {\n    throw error\n  }\n}\n\nconst stringifyArray = arr =>\n  `[${arr.map(item =>\n    Array.isArray(item) ? stringifyArray(item) : item.toString()\n  )}]`\n\n// TODO: Import this directly from graphql-compose once we update to v7\nconst isNamedTypeComposer = type =>\n  type instanceof ObjectTypeComposer ||\n  type instanceof InputTypeComposer ||\n  type instanceof ScalarTypeComposer ||\n  type instanceof EnumTypeComposer ||\n  type instanceof InterfaceTypeComposer ||\n  type instanceof UnionTypeComposer\n\nconst validate = (type, value) => {\n  if (type instanceof GraphQLNonNull) {\n    if (value == null) {\n      throw new Error(`Expected non-null field value.`)\n    }\n    return validate(type.ofType, value)\n  } else if (type instanceof GraphQLList) {\n    if (!Array.isArray(value)) {\n      throw new Error(`Expected array field value.`)\n    }\n    return value.map(v => validate(type.ofType, v))\n  } else {\n    return type.parseValue(value)\n  }\n}\n\nconst checkQueryableInterfaces = ({ schemaComposer }) => {\n  const queryableInterfaces = new Set()\n  schemaComposer.forEach(type => {\n    if (\n      type instanceof InterfaceTypeComposer &&\n      type.getExtension(`nodeInterface`)\n    ) {\n      queryableInterfaces.add(type.getTypeName())\n    }\n  })\n  const incorrectTypes = []\n  schemaComposer.forEach(type => {\n    if (type instanceof ObjectTypeComposer) {\n      const interfaces = type.getInterfaces()\n      if (\n        interfaces.some(iface => queryableInterfaces.has(iface.name)) &&\n        !type.hasInterface(`Node`)\n      ) {\n        incorrectTypes.push(type.getTypeName())\n      }\n    }\n  })\n  if (incorrectTypes.length) {\n    report.panic(\n      `Interfaces with the \\`nodeInterface\\` extension must only be ` +\n        `implemented by types which also implement the \\`Node\\` ` +\n        `interface. Check the type definition of ` +\n        `${incorrectTypes.map(t => `\\`${t}\\``).join(`, `)}.`\n    )\n  }\n}\n"],"file":"schema.js"}